@include establish-baseline;

@function map-fetch($map, $keys) {
  $key: nth($keys, 1);
  $length: length($keys);
  $value: map-get($map, $key);
  @if ($length > 1) {
    $rest: ();
    @for $i from 2 through $length {
      $rest: append($rest, nth($keys, $i));
    }
    @return map-fetch($value, $rest)
  } @else {
    @return $value;
  }
}

// Compass Vertical Rhythm setup 
$base-font-size: 16px;
$base-line-height: 24px;
$rhythm-unit: 'rem';
$rem-with-px-fallback: true;

html,
body {
  background-color: $wash-color;
  font-family: $font-family;
  -webkit-font-kerning: normal;
  font-size: 20px;
}

// The type-scale Map contains the whole type scale.
// Add your own sizes or modify these, they will be available in the type-scale mixin for use.

// Default Sizes
$type-prefix: 't-';
$type-scale: (
  tiny: (
    font-size: 11px,
    base-lines: .625
  ),
  small: (
    font-size: 13px,
    base-lines: .725
  ),
  base: (
    font-size: 15px,
    base-lines: .825
  ),
  medium: (
    font-size: 18px,
    base-lines: .95
  ),
  large: (
    font-size: 26px,
    base-lines: 1.25
  ),
  xlarge: (
    font-size: 32px,
    base-lines: 1.725
  ),
  xxlarge: (
    font-size: 40px,
    base-lines: 2
  )
);

$type-weight: (
  thin: 200,
  light: 300,
  regular: 400,
  semi: 600,
  bold: 700
);

// A type scaling utility $type-scale map with the predefined values

 // Each loop that outputs all of the type scales as placeholders with their type-prefix
 // ex. %t-tiny, %t-small
@each $scale in map-keys($type-scale) {
  %#{$type-prefix}#{$scale} {
    @include adjust-font-size-to (
      map-fetch($type-scale, $scale font-size),   
      map-fetch($type-scale, $scale base-lines)
    );
  }
}

// A mixin for using type scale
// Parameters: 
// $scale (tiny, small...) 
// $extend (boolean) - true by default, if needed inside media query use false to @include the content instead of @extend
// ex. @include type-scale(small) or @include type-scale(small, false) for use inside media queries. 

@mixin type-scale($scale, $extend: false, $map: $type-scale) {
  @if $extend {
    @extend %#{$type-prefix}#{$scale};
  } @else {
    @include adjust-font-size-to(
      map-fetch($map, $scale font-size),
      map-fetch($map, $scale base-lines)
    );
  }
}

// A simple type-weight mixin
// ex. @include type-weight(strong);
@mixin type-weight($weight) {
  font-weight: map-get($type-weight, $weight);
}

// A quick ligature mixin, to be updated with a more modular one
@mixin type-ligatures() {
  -moz-font-feature-settings: "liga=1, dlig=1";
  -ms-font-feature-settings: "liga", "dlig";
  -webkit-font-feature-settings: "liga", "dlig";
  -o-font-feature-settings: "liga", "dlig";
  font-feature-settings: "liga", "dlig";
}

// Headings
#{h1, h2, h3, h4, h5, h6} {
  font-family: $base-font-family;
  margin-top: 0;
  @include margin-trailer(1);
  @include type-ligatures;
  @include type-weight(bold);
  letter-spacing: .02em;
}

h1,
.alpha {
  @include type-scale(xxlarge);
}

h2,
.beta {
  @include type-scale(xlarge);
}

h3,
.gamma {
  @include type-scale(large);
}

h4,
.delta {
  @include type-scale(medium);
}

h5,
.epsilon {
  @include type-scale(base);
}

h6,
.zeta {
  @include type-scale(small);
}

// Paragraphs
p {
  @include margin-trailer(1);
  @include word-break(break-word);
  @include hyphens(auto);
  @include type-ligatures;
  @include type-scale(base);
  @include type-weight(light);
  font-family: $font-family;
  letter-spacing: .02em;
}

// Small
small,
.omega {
  @include type-scale(tiny);
}

a {
  color: $primary-color;
  letter-spacing: .02em;
  text-decoration: none;
  -webkit-transition: color .2s;
  transition: color .2s;

  &.dim {
    color: #333;

    &:hover {
      color: $primary-color;
    }
  }
}

ul,
ul li ul {
  @include type-scale(base);
  letter-spacing: .04em;
  list-style: none;
  margin: 0;
}

dl dt,
dl dd {
  @include type-scale(base);
  letter-spacing: .04em;
  margin: 0;
}
